npm install 

npm run dev

React (SPA >> single page application )
component base 
react project >> main.jsx (index.jsx >>> CRA )

html 
h1 >> tag 
react >> h1 input component

component >> button 
form >> login // signup >> contact 
input 
email 
pass 
age 
number
button 
router

JSX ( javascript XML ~= HTML ) >>> return ( root node )
react syntax
  <> React.Fragment </>
div

React Syntax ????? 
JSX <<<< 
HTML CSS JS 
component create

js es6 modules >>>> export import

React dom

what is React?

SPA (single page application)

uppercase
Capitalize 
Hello 
hello
lowercase

export default >>>> import (as u like)
export 

React (frontend lib) SPA 
Next JS (React Framework) hydration // CSR SSR SSG 
node js >>> js api ( javascript runtime ) {browser} 

component 2 
Class                              functional
props >>> properties                ===

Props >>> 
parent to child ==> data
data >>>> child 
child !>>> parent 

component ?? props

child >>> object {
  parent.props(key) : parent.vaule
} 

jsx >>> Js Expression {}

state 

Class >> state (how React work) 
functional >> stateless component // presentational component // show 
React version 17 React Hook >>>>> functional component state 
React version 17 functional 

state 
Class 

State >> အခြေအနေ 
props data pass not chages value
state not data pass value <<< initial val >> update value 

state = object 
setState( state , callback func )

onclick= { function Name }

-1 , +5 this.setState({
  for loop () {
    +1 
  }
})


setState >>> prevState

async ( p ) => p


component >> 
component lifecycle 
phase >> 3 
mounting  >>> component >>>> render (only one time )
coponentDidMount()
updating  >>> conponent > state change >> update()
componentDidUpdate()
unmounting >> conponent >> dom <<< remove 
conponneWillUnmount()

? : (ternary) && (and // short circut)

unmounting >>>> {
  component >> dom clear ( remove )
  this (event // function )
}

react HOOK 
useEffect () << functional hook (component lifecycle)

api fetch >> 

browser data >> 

axios >> 

list rendering >> array >>> render array.map()
key props >> {
  key >>> list (same)
}
condition render


form handling

event handler 
onClick {}
onChange()
onSubmit()

state()

React component >> controlled component ??? uncontrolled component
React controlled component 


prev >>>> merge (functional) setState (prevState => )

class functional >>> 17 (react hook )
state (this.state // this.setState )
         useState() // 
clm   useEffect() // 
context useContext()

true && () (short circut)
? : (if else) <<< ternary operator

this >>>> javascript 
this (object) ()
javascript es6 

this >>> () => {}

binding

styling css
inline html style = ""
background-color 
backgroundColor
external css
module >>> object.key << dot notation /// [""] <<< bracket notation

v dom 
javascript dom  >> 

apple 
orange 
peach 
mango
new 
new 
new

v dom 
actual dom 
list 
React.createElement()

todo list 
{
  input 
  2state 
  input // array 
  list render 
  styling 
} /// homework

todo app 

array << state
string  << state

form <<< onSubmit
input <<< state string onChange
button <<<< onClick 
form

render (array) <<< array && there is no todos

react 
component >>> 2 
func(stateless)<<< state //presentational component     class(state component) 
                                                        side effect 
functional 
state >>> react Hook 
useState <<< 
react router 
useEffect <<< clc 
useContext <<< context api 
useReducer <<< 

useState()

spa >> (single page application) 
router >>> 
setup 


BrowserRouter >>> root node အုပ်
Routes 
Route 

route >>> homework #


useEffect() << clc unmounting

[] << empty array 
initial state >>> 
async ()=> {
  setState(data) >>> update 
  for(){

  }
} <<< state udate  << 

1000 api // free

context api <<< 

context 

phase 
craetContext >>> React
create >>> context >>> done > 
provide >>> context >>> done >

<Context.provider> >>> props >> value
  ComponentA
</Context.provider>

consume >>> context >>>>
<Context.comsumer>
  {(name)=>()}
</Context.comsumer>

global var

React hook 
useContext()


add to cart 

add to cart >> homework

useReducer() <<< beginner 

next js >>>> api >>> node js 
express js 

next js >> 
node js >>> 
express

long term target >>>>>> 
next js >>> 

react <<< beginner friendly 

senior lv >>> vue js >> angular >> httpinterceptor >>> httpclient << rxjs
                                Signal
 >> react 

reducer = (state , action ) =>{
  return state <<< change >> add // remove
}


const [ state , dispatch() ] = useReducer(reducer , initial)

state , setState 

type: <<<< 
payload: <<<< 

state 
effect
context
reducer 



cart >>> {
  name : adfasdf,
  qanty : 1,
  price: 100,
}

math.random() >>>> 0 >>>> 1